<?php

namespace App\Http\Controllers\API\DocumentIssuer;

use App\Helpers\JsonResponse;
use App\Http\Controllers\API\Controller;
use App\Http\Requests\DocumentIssuer\DocumentIssuerRequest;
use App\Http\Resources\documentIssuer\DocumentIssuerResource;
use App\Models\DocumentIssuer\DocumentIssuer;
use App\Repositories\IRepositories\IDocumentIssuerRepository;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

use function getAutoGeneratedNextCode;
use function trans;

class DocumentIssuerController extends Controller
{
    private $documentIssuerRepository;

    public function __construct(IDocumentIssuerRepository $documentIssuerRepository)
    {
        $this->documentIssuerRepository = $documentIssuerRepository;
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            $all_documentIssuer = DocumentIssuerResource::collection($this->documentIssuerRepository->all());
            return $all_documentIssuer->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(DocumentIssuerRequest $request)
    {
        try {
            $model = $this->documentIssuerRepository->create($request->validated());
            $example = new DocumentIssuerResource($model);
            return $example->additional(JsonResponse::savedSuccessfully());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(DocumentIssuer $documentIssuer)
    {
        try {
            $example = new DocumentIssuerResource($documentIssuer);
            return $example->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(DocumentIssuerRequest $request , DocumentIssuer $documentIssuer)
    {
        try {
            $this->documentIssuerRepository->update($request->validated(), $documentIssuer->id);
            return JsonResponse::respondSuccess(trans(JsonResponse::MSG_UPDATED_SUCCESSFULLY), null);
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(DocumentIssuer $documentIssuer)
    {
        $databaseName = DB::connection()->getDatabaseName();
        if(checkColumnUsed($databaseName,'c_document_issuer','id',$documentIssuer->id)){
           return JsonResponse::respondError(trans(JsonResponse::MSG_CANNOT_DELETED));
        }else{
            $documentIssuer->delete();
           return JsonResponse::respondSuccess(trans(JsonResponse::MSG_DELETED_SUCCESSFULLY));
        }
    }

    public function navigate(Request $request, DocumentIssuer $documentIssuer)
    {
        try {
            if (!in_array($request->case, ['previous', 'next', 'first', 'last']))
                return JsonResponse::respondError('The Navigate case should be one of previous,next,first,last', 422);
            $example = new DocumentIssuerResource($this->exampleRepository->navigate($documentIssuer->id, $request->case, 'type', $request->type));
            return $example->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }


    public function getCode(Request $request)
    {
        $code = DocumentIssuer::orderBy('id', 'DESC')->pluck('code')->first();
        $nextCode=getAutoGeneratedNextCode($code);

        $code1 = DocumentIssuer::where('code',$nextCode)->pluck('code')->first();
        while($code1 !=null){
            $nextCode=getAutoGeneratedNextCode($code1);
            $code1 = DocumentIssuer::where('code',$nextCode)->pluck('code')->first();
        }
        return JsonResponse::respondSuccess('success', $nextCode);

    }

}
