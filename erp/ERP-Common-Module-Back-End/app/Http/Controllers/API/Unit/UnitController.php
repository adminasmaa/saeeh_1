<?php

namespace App\Http\Controllers\Api\Unit;

use App\Helpers\JsonResponse;
use App\Http\Controllers\Controller;
use App\Http\Requests\Unit\UnitRequest;
use App\Http\Resources\Unit\UnitResource;
use App\Models\Unit\Unit;
use App\Repositories\IRepositories\Unit\IUnitRepository;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;

class UnitController extends Controller
{
    private $unitRepository;

    public function __construct(IUnitRepository $unitRepository)
    {
        $this->unitRepository = $unitRepository;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     * @auth Developer
     */
    public function index()
    {
        try {
            $all_units = UnitResource::collection($this->unitRepository->all());
            return $all_units->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     * @auth Developer
     */
    public function store(UnitRequest $request)
    {
        try {
            $model = $this->unitRepository->create($request->validated());
            $unit = new UnitResource($model);
            return $unit->additional(JsonResponse::savedSuccessfully());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param Unit $unit
     * @return \Illuminate\Http\Response
     * @auth Developer
     */
    public function show(Unit $unit)
    {
        try {
            $unit = new UnitResource($unit);
            return $unit->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param Example $example
     * @return \Illuminate\Http\Response
     * @auth Developer
     */
    public function update(UnitRequest $request, Unit $unit)
    {

        try {
            $this->unitRepository->update($request->validated(), $unit->id);
            return JsonResponse::respondSuccess(trans(JsonResponse::MSG_UPDATED_SUCCESSFULLY), null);
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param Example $example
     * @return \Illuminate\Http\Response
     * @auth Developer
     */
    public
    function destroy(Unit $unit)
    {
        $databaseName = DB::connection()->getDatabaseName();
        if(checkColumnUsed($databaseName,'c_units','id',$unit->id)){
            return JsonResponse::respondError(trans(JsonResponse::MSG_CANNOT_DELETED));
        }else{
            $unit->delete();
            return JsonResponse::respondSuccess(trans(JsonResponse::MSG_DELETED_SUCCESSFULLY));
        }

    }


    public function navigate(Request $request, Unit $unit)
    {
        try {
            if (!in_array($request->case, ['previous', 'next', 'first', 'last']))
                return JsonResponse::respondError('The Navigate case should be one of previous,next,first,last', 422);
            $unit = new UnitResource($this->unitRepository->navigate($unit->id, $request->case));
            return $unit->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    public function getCode()
    {
        $code = Unit::orderBy('id', 'DESC')->pluck('code')->first();
        $nextCode = getAutoGeneratedNextCode($code);
        $newCode = Unit::where('deleted_at', null)->where('code', $nextCode)->pluck('code')->first();
        while ($newCode != null) {
            $nextCode=getAutoGeneratedNextCode($newCode);
            $newCode = Unit::where('deleted_at', null)->where('code', $nextCode)->pluck('code')->first();
        }
        return JsonResponse::respondSuccess('success',$nextCode);

    }

}
