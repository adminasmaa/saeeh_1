<?php

namespace App\Http\Controllers\API\Payment;

use App\Helpers\JsonResponse;
use App\Http\Controllers\Controller;
use App\Http\Requests\Payment\PaymentTypeRequest;
use App\Http\Resources\payment\PaymentTypeResource;
use App\Models\payment\PaymentType;
use App\Repositories\IRepositories\IPaymentTypeRepository;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PaymentTypeController extends Controller
{
    private $PaymentTypeRepository;

    public function __construct(IPaymentTypeRepository $PaymentTypeRepository)
    {
        $this->PaymentTypeRepository = $PaymentTypeRepository;
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            $PaymentTypes = PaymentTypeResource::collection($this->PaymentTypeRepository->all());
            return $PaymentTypes->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(PaymentTypeRequest $request)
    {
        try {
            $model = $this->PaymentTypeRepository->create($request->validated());
            $PaymentTypes = new PaymentTypeResource($model);
            return $PaymentTypes->additional(JsonResponse::savedSuccessfully());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\payment\PaymentType  $paymentType
     * @return \Illuminate\Http\Response
     */
    public function show(PaymentType $paymentType)
    {
        try {
            $paymentType = new PaymentTypeResource($paymentType);
            return $paymentType->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\payment\PaymentType  $paymentType
     * @return \Illuminate\Http\Response
     */
    public function update(PaymentTypeRequest $request, PaymentType $paymentType)
    {
        try {
            $this->PaymentTypeRepository->update($request->validated(), $paymentType->id);
            return JsonResponse::respondSuccess(trans(JsonResponse::MSG_UPDATED_SUCCESSFULLY), null);
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\payment\PaymentType  $paymentType
     * @return \Illuminate\Http\Response
     */
    public function destroy(PaymentType $paymentType)
    {
        $databaseName = DB::connection()->getDatabaseName();
        if(checkColumnUsed($databaseName,'c_payment_types','id',$paymentType->id)){
           return JsonResponse::respondError(trans(JsonResponse::MSG_CANNOT_DELETED));
        }else{
           $paymentType->delete();
           return JsonResponse::respondSuccess(trans(JsonResponse::MSG_DELETED_SUCCESSFULLY));
        }
    }


    public function getCode(Request $request)
    {
        $code = PaymentType::where('deleted_at', null)->orderBy('id', 'DESC')->pluck('code')->first();

        $nextCode = getAutoGeneratedNextCode($code);

        $code1 = PaymentType::where('deleted_at', null)->where('code', $nextCode)->pluck('code')->first();
        while ($code1 != null) {
            $nextCode = getAutoGeneratedNextCode($code1);
            $code1 = PaymentType::where('deleted_at', null)->where('code', $nextCode)->pluck('code')->first();
        }
        return JsonResponse::respondSuccess('success', $nextCode);
    }




    public function navigate(Request $request, PaymentType $paymentType)
    {
        try {
            if (!in_array($request->case, ['previous', 'next', 'first', 'last']))

                return JsonResponse::respondError('The Navigate case should be one of previous,next,first,last', 422);
            $paymentType = new PaymentTypeResource($this->PaymentTypeRepository->navigate($paymentType->id, $request->case));
            return $paymentType->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }
}
