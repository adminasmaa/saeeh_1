<?php

namespace App\Http\Controllers\API\CarClassification;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\{DB, Validator};
use App\Helpers\JsonResponse;
use App\Http\Controllers\API\Controller;
use App\Http\Requests\CarClassification\CarClassificationRequest;
use App\Http\Resources\CarClassification\CarClassificationResource;
use App\Models\CarClassification\CarClassification;
use App\Repositories\IRepositories\ICarClassificationRepository;
// use Illuminate\Support\Facades\DB;

use function getAutoGeneratedNextCode;
use function trans;

class CarClassificationController extends Controller
{
    private $carClassificationRepository;

    public function __construct(ICarClassificationRepository $carClassificationRepository)
    {
        $this->carClassificationRepository = $carClassificationRepository;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     * @auth Nesma
     */
    public function index()
    {
        try {
            $all_CarClassifications = CarClassificationResource::collection($this->carClassificationRepository->all());
            return $all_CarClassifications->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     * @auth Developer
     */
    public function store(CarClassificationRequest $request)
    {
        try {
            $model = $this->carClassificationRepository->create($request->validated());
            $example = new CarClassificationResource($model);
            return $example->additional(JsonResponse::savedSuccessfully());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param CarClassification $CarClassification
     * @return \Illuminate\Http\Response
     * @auth Nesma
     */
    public function show(CarClassification $car_classification)
    {
        try {
            $example = new CarClassificationResource($car_classification);
            return $example->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param CarClassification $CarClassification
     * @return \Illuminate\Http\Response
     * @auth Nesma
     */
    public function update(CarClassificationRequest $request, CarClassification $car_classification)
    {
        try {

            $this->carClassificationRepository->update($request->validated(), $car_classification->id);
            return JsonResponse::respondSuccess(trans(JsonResponse::MSG_UPDATED_SUCCESSFULLY), null);
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param CarClassification $CarClassification
     * @return \Illuminate\Http\Response
     * @auth Developer
     */
    public function destroy(CarClassification $car_classification)
    {
        $databaseName = DB::connection()->getDatabaseName();
        if (checkColumnUsed($databaseName, 'c_vehicle_classifications', 'id', $car_classification->id)) {
            return JsonResponse::respondError(trans(JsonResponse::MSG_CANNOT_DELETED));
        } else {
            $car_classification->delete();
            return JsonResponse::respondSuccess(trans(JsonResponse::MSG_DELETED_SUCCESSFULLY));
        }
    }

    /**
     * navigation.
     *
     * @param CarClassification $CarClassification , case of navigation
     * @return object
     * @auth A.Soliman
     */
    public function navigate(Request $request, CarClassification $car_classification)
    {
        try {
            if (!in_array($request->case, ['previous', 'next', 'first', 'last']))
                return JsonResponse::respondError('The Navigate case should be one of previous,next,first,last', 422);
            $car_classification = new CarClassificationResource($this->CarClassificationRepository->navigate($car_classification->id, $request->case, 'type', $request->type));
            return $car_classification->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    public function getCode(Request $request)
    {
        $code = CarClassification::where('deleted_at', null)->orderBy('id', 'DESC')->pluck('code')->first();

        $nextCode = getAutoGeneratedNextCode($code);

        $code1 = CarClassification::where('deleted_at', null)->where('code', $nextCode)->pluck('code')->first();
        while ($code1 != null) {
            $nextCode = getAutoGeneratedNextCode($code1);
            $code1 = CarClassification::where('deleted_at', null)->where('code', $nextCode)->pluck('code')->first();
        }
        return JsonResponse::respondSuccess('success', $nextCode);
    }
}
