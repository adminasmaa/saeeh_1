<?php

namespace App\Http\Controllers\API\CarStatus;

use App\Helpers\JsonResponse;
use App\Http\Controllers\API\Controller;
use App\Http\Requests\CarStatus\CarStatusRequest;
use App\Http\Resources\CarStatus\CarStatusResource;
use App\Models\CarStatus\CarStatus;
use App\Repositories\IRepositories\ICarStatusRepository;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

use function getAutoGeneratedNextCode;
use function trans;

class CarStatusController extends Controller
{
    private $carstatusRepository;

    public function __construct(ICarStatusRepository $carstatusRepository)
    {
        $this->carstatusRepository = $carstatusRepository;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            $all_carstatus = CarStatusResource::collection($this->carstatusRepository->all());
            return $all_carstatus->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(CarStatusRequest $request)
    {

        try {
            $model = $this->carstatusRepository->create($request->validated());
            $example = new CarStatusResource($model);
            return $example->additional(JsonResponse::savedSuccessfully());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function show(CarStatus $carStatus)
    {
        try {
            $example = new CarStatusResource($carStatus);
            return $example->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function update(CarStatusRequest $request, CarStatus $carStatus)
    {
        try {
            $this->carstatusRepository->update($request->validated(), $carStatus->id);
            return JsonResponse::respondSuccess(trans(JsonResponse::MSG_UPDATED_SUCCESSFULLY), null);
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(CarStatus $carStatus)
    {

        $databaseName = DB::connection()->getDatabaseName();
        if(checkColumnUsed($databaseName,'c_car_status','id',$carStatus->id)){
           return JsonResponse::respondError(trans(JsonResponse::MSG_CANNOT_DELETED));
        }else{
            $carStatus->delete();
           return JsonResponse::respondSuccess(trans(JsonResponse::MSG_DELETED_SUCCESSFULLY));
        }


    }

    public function navigate(Request $request, CarStatus $carStatus)
    {

        try {
            if (!in_array($request->case, ['previous', 'next', 'first', 'last']))
                return JsonResponse::respondError('The Navigate case should be one of previous,next,first,last', 422);
            $carStatus = new CarStatusResource($this->carstatusRepository->navigate($carStatus->id, $request->case, 'type', $request->type));
            return $carStatus->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    public function getCode()
    {

        $code = CarStatus::orderBy('id', 'DESC')->pluck('code')->first();
        return JsonResponse::respondSuccess('success',getAutoGeneratedNextCode($code));
    }
}
