<?php

namespace App\Http\Controllers\API\Card;

use App\Helpers\JsonResponse;
use App\Http\Controllers\Controller;
use App\Http\Requests\API\Card\DocumentTypeRequest;
use App\Http\Resources\API\Card\DocumentTypeResource;
use App\Models\card\DocumentType;
use App\Repositories\IRepositories\IDocumentTypeRepository;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class DocumentTypeController extends Controller
{
    private $documentTypeRepository;

    public function __construct(IDocumentTypeRepository $documentTypeRepository)
    {
        $this->documentTypeRepository = $documentTypeRepository;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {

        try {
            $all_document_types = DocumentTypeResource::collection($this->documentTypeRepository->getAllByType($request->dtype));
            return $all_document_types->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(DocumentTypeRequest $request)
    {
        try {
            $model = $this->documentTypeRepository->create($request->validated());
            $documentType = new DocumentTypeResource($model);
            return $documentType->additional(JsonResponse::savedSuccessfully());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param \App\Models\card\DocumentType $documentType
     * @return \Illuminate\Http\Response
     */
    public function show(DocumentType $document_type)
    {
        try {
            $document_type = new DocumentTypeResource($document_type);
            return $document_type->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }


    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param \App\Models\card\DocumentType $documentType
     * @return \Illuminate\Http\Response
     */
    public function update(DocumentTypeRequest $request, DocumentType $document_type)
    {
        try {

            $this->documentTypeRepository->update($request->validated(), $document_type->id);
            return JsonResponse::respondSuccess(trans(JsonResponse::MSG_UPDATED_SUCCESSFULLY), null);
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param \App\Models\card\DocumentType $documentType
     * @return \Illuminate\Http\Response
     */
    public function destroy(DocumentType $document_type)
    {
        $databaseName = DB::connection()->getDatabaseName();
        if(checkColumnUsed($databaseName,'c_document_types','id',$document_type->id)){
           return JsonResponse::respondError(trans(JsonResponse::MSG_CANNOT_DELETED));
        }else{
           $document_type->delete();
           return JsonResponse::respondSuccess(trans(JsonResponse::MSG_DELETED_SUCCESSFULLY));
        }
    }

    public function navigate(Request $request, DocumentType $document_type)
    {

        try {
            if (!in_array($request->case, ['previous', 'next', 'first', 'last']))
            
                return JsonResponse::respondError('The Navigate case should be one of previous,next,first,last', 422);
            $document_type = new DocumentTypeResource($this->documentTypeRepository->navigate($document_type->id, $request->case));
            return $document_type->additional(JsonResponse::success());
        } catch (\Exception $e) {
            return JsonResponse::respondError($e->getMessage());
        }
    }



    public function getCode(Request $request)
    {
        $code = DocumentType::where('dtype',$request->dtype)->where('deleted_at',null)->orderBy('id', 'DESC')->pluck('code')->first();
        $nextCode=getAutoGeneratedNextCode($code);

        $code1 = DocumentType::where('dtype',$request->dtype)->where('deleted_at',null)->where('code',$nextCode)->pluck('code')->first();
        while($code1 !=null){
            $nextCode=getAutoGeneratedNextCode($code1);
            $code1 = DocumentType::where('dtype',$request->dtype)->where('deleted_at',null)->where('code',$nextCode)->pluck('code')->first();
        }
        return JsonResponse::respondSuccess('success', $nextCode);

    }

}
