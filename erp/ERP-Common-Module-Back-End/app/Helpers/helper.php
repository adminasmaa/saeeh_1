<?php

use Illuminate\Support\Facades\DB;

if (!function_exists('getAutoGeneratedNextCode')) {

    function getAutoGeneratedNextCode($code)
    {
        $numbersInCode = "";
        $reversedNumberInCode = "";
        $codeLength = strlen($code);
        // For loop throughout the given code to check for the value if it is number or not
        // via ascii code for numbers (0-9) which are located in range (48-57), then
        // we will get all numbers from the right till we reach alpha character
        // the loop will be stopped!
        for ($i = $codeLength - 1; $i >= 0; $i--) {

            if (ord($code[$i]) >= 48 && ord($code[$i]) <= 57) {

                $numbersInCode .= $code[$i];
            } else {
                break;
            }
        }
        $reversedNumberInCode = strrev($numbersInCode);
        $lengthOfNumbersInCode = strlen($reversedNumberInCode);
        $reversedNumberInIntegerFormat = (int)$reversedNumberInCode;
        $autoIncrementedNumberByOne = $reversedNumberInIntegerFormat + 1;
        $autoIncrementedNumberInStringFormat = (string)$autoIncrementedNumberByOne;
        //$LengthOfTheAutoIncrementedNumber = strlen($autoIncrementedNumberInStringFormat);

        $rightPartOfTheNewCode = str_pad($autoIncrementedNumberInStringFormat, $lengthOfNumbersInCode, "0", STR_PAD_LEFT);
        $lengthOfTheRightPartOfTheCode = $codeLength - $lengthOfNumbersInCode;
        $leftPartOfTheNewCode = substr($code, 0, $lengthOfTheRightPartOfTheCode);

        $nextCode = $leftPartOfTheNewCode . $rightPartOfTheNewCode;

        return $nextCode;
    }
};


function checkColumnUsed($pschema_name,$ptable_name,$pcolumn_name,$pvalue) {
    $table_list=DB::select('SELECT
        TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME
      FROM
        INFORMATION_SCHEMA.KEY_COLUMN_USAGE
      WHERE
        REFERENCED_TABLE_SCHEMA = '."'$pschema_name'".' AND
        REFERENCED_TABLE_NAME = '."'$ptable_name'".' AND
        REFERENCED_COLUMN_NAME = '."'$pcolumn_name'".'');
 
        foreach($table_list as $table){
            $table_name=$table->TABLE_NAME;
            $column_name=$table->COLUMN_NAME;
            $ROWSCOUNT=DB::select('SELECT COUNT(*) as R_count FROM '. $table_name.' WHERE '.$column_name.'='.$pvalue);

            if($ROWSCOUNT[0]->R_count >0) {

                return true;
                break;
            }

        }
        return false;
}


 function insertExchange($from_currency,$to_currency,$exchange_date,$exchange_rate){
     $x=1/$exchange_rate;
 

    DB::insert('Insert into c_currencies_exchange (from_currency_id,to_currency_id,exchange_date,exchange_rate,created_at,updated_at)
    
    values (?, ?, ?, ?,?,?)', [$to_currency,$from_currency,$exchange_date,$x,now(),now()]);

}


function updateExchange($from_currency,$old_to_currency,$to_currency,$old_exchange_date,$exchange_date,$exchange_rate){
    $x=1/$exchange_rate;


   DB::update('update c_currencies_exchange set from_currency_id = ?,exchange_rate =?  , exchange_date = ?,updated_at=?
   Where from_currency_id = ? and to_currency_id = ? and exchange_date =? ',[$to_currency, $x,$exchange_date,now(),$old_to_currency,$from_currency,$old_exchange_date]);

}
